This document describes the Uxn assembler, including the nonstandard
extensions of the implementation included in this repository.

Specify two or three command-line arguments:

* Input file name (you can specify /dev/stdin to read from stdin).

* Output file name (you can specify /dev/stdout to write to stdout, or you
can specify /dev/null to discard the output).

* Name output file name (you can specify /dev/stdout to write to stdout).
This is optional, and if specified, then it will write a list of labels
(including unused labels too) and their addresses to this file. (This is a
nonstandard feature.)


=== Tokens ===

A token consists of a sequence of one or more non-whitespace characters
(you can have whitespace characters to separate them). The maximum length
of each token is sixty-three characters.

All numbers must be lowercase hexadecimal, and normally must be either two
or four hex digits.

The following standard tokens are available:

 ( which begins a block comment; all further tokens up to ) are ignored.
 Comments can be nested.

 [ or ] has no meaning. Anything inside this block is still assembled as
 though the [ and ] commands are not present.

 ~ and a file name will include that file as a source file.

 % and a macro name will define a macro; you will need tokens { and }
 around the definition of the macro.

 The name of a previously defined macro without % in front will call that
 macro, as though its definition is substituted in its place.

 | and a number or label name will set the current address to that number
 (or to the address of that label). Any address is possible, but you cannot
 assemble anything in the zero page nor can anything be assembled out of
 order, although you can skip any space.

 $ and a number or label name will advance the address by that number (or
 by the address of that label). (The padding will  be all zeros if not
 filled in.)

 @ and a name will make a label with that name. If the label name starts
 with a uppercase letter, then warnings about that label being unused are
 suppressed. (Otherwise, a warning is emitted if the label is never used.)

 & and a name will make a label whose name is the same as the most recent
 @ command and then / and then the name specified by the & command.

 # and a number will make a LIT or LIT2 opcode with the specified number
 (the number of hex digits determines which opcode).

 A number without # is similar but the opcode is omitted, so raw data is
 emitted instead.

 . and a name will make a LIT opcode whose value is the low 8-bits of the
 address of the specified name.

 , and a name will make a LIT opcode whose value is a signed 8-bit value
 which is a relative offset of the address of the specified name; this
 should be used immediately preceding a JMP, JSR, or JCN instruction.

 ; and a name will make a LIT2 opcode whose value is the address of the
 specified name.

 : and a name will write the 16-bit address of the specified name directly,
 without any opcode. (It is like ; but excluding the LIT2 instruction.)

 = and a name is the same as : and a name.

 - and a name is like . but without the LIT opcode.

 _ and a name is like , but without the LIT opcode.

 ? and a name will make a JCI instruction jumping to that label.

 ! and a name will make a JMI instruction jumping to that label.

 " and any characters (other than whitespaces) will emit that sequence of
 characters without any opcodes or delimiters. (If you need spaces, then
 you must use separate tokens such as 20 for spaces.)

 An instruction opcode consists of three uppercase letters, optionally
 followed by any combination of instruction flags which can be "2" for
 16-bit operands, "r" to work with the other stack, and/or "k" to keep
 the input operands in the stack. (You cannot code the JCI, JMI, and JSI
 instructions in this way, although BRK can be coded in this way.)

 A name by itself to make a JSI instruction.

The following nonstandard tokens are available:

 \\ begins a line comment, which ends at the next line break.

 \~ and a file name will include the contents of the binary file.

 \. or \, is like . or , but excluding the LIT instruction. (These are
 like - and _ but are nonstandard; they were added before the - and _
 signs were made standard.)

 \ and a number pushes the number to the special stack (which is a stack
 which exists only at compile-time).

 \: and a name will push the address of the name to the special stack.
 The label must come before this command; forward references cannot be
 used with this command, and & also cannot be used.

 \@ and a name will pop an address from the special stack and define a
 label whose address is the address which has been popped in this way.

 \_ and further text is a special calculation; see the below section
 about special calculations. These are executed immediately at compile
 time, before the compiled program is written to the output file.

 \- or \= followed by eight more characters and optionally ; will make
 a graphical tile; you should have eight such commands per tile, and
 a semicolon at the end of the last one. Use \- for 1bpp tiles and \=
 for 2bpp tiles. The colour codes are . or 0 for the background colour,
 and numbers 1 2 3 for the other colours.

 [@ makes a anonymous label; the matching ] command will reference the
 same anonymous label as this one. (Nesting is allowed.)

 ]@ will make a anonymous label which the matching [ before it will
 reference it.

 [, [. [; [: [? [! will act like a , . ; : ? ! referencing the anonymous
 label defined by the matching ]@ command.

 ], ]. ]; ]: ]? ]! will act like a , . ; : ? ! referencing the anonymous
 label defined by the matching [@ command.

 [& and ]& are like [! and ]! but the opcode is JSI instead of JMI.

 ]\ acts like \: for the matching [@ command.

 ][ is like [! corresponding to a later ] and then ]@ corresponding to a
 earlier [ command (it can be used like a else block).

For the . , : ; commands, the name can optionally start with & to mean
that it is interpreted the same as for a & command.

Another nonstandard feature is that if you define a macro whose name
starts with a character which has a special meaning, then that special
meaning is ignored in the rest of the file.


=== Special calculations ===

Each instruction is a single character.

Numbers 0 to 9 and a to f push that number to the special stack.

'  ( y z -- yz )  Calculates z+(y<<4).

"  ( w x y z -- wxyz )  Calculates z+(y<<4)+(x<<8)+(w<<12).

_  ( -- )  Set loop point.

!  ( x -- )  Set current address.

@  ( -- x )  Get current address.

#  ( x -- )  Set current length. (This length includes the zero page,
even though the zero page is not written to the output file.)

$  ( -- x )  Get current length.

+  ( x y -- z )  Addition x+y.

-  ( x y -- z )  Subtraction x-y.

*  ( x y -- z )  Multiplication x*y.

/  ( x y -- z )  Division x/y.

%  ( x y -- z )  Modulo x&y.

&  ( x y -- z )  Bitwise AND.

|  ( x y -- z )  Bitwise OR.

^  ( x y -- z )  Bitwise XOR.

<  ( x y -- z )  Left shift x by y bits.

>  ( x y -- z )  Right shift x by y bits.

:  ( x -- x x )  Duplicate.

,  ( x y -- y x )  Swap.

.  ( x -- )  Discard.

E  ( code -- )  Emit an error and stop compiling.

g  ( address -- value )  Read 8-bits from memory.

G  ( address -- value )  Read 16-bits from memory.

k  ( count -- count? )  Similar to o (below) but ends the loop if the new
count is zero instead of the old count.

o  ( count -- count? )  If count is nonzero, decrement and go back to the
beginning; if it is already zero then just discards it and continues the
execution from here instead.

p  ( value address -- )  Write 8-bits to memory. You can write anywhere
including the zero page and can also overwrite memory that has already
been written. Anything written to the zero page can be read back by other
special calculations but will not be written to the output file; anything
written outside of the zero page is written to the output file too.

P  ( value address -- )  Write 16-bits to memory.

w  ( value -- )  Write 8-bits at the current address and advance. You
cannot write in the zero page or overwrite what is already written.

W  ( value -- )  Write 16-bits at the current address and advance. You
cannot write in the zero page or overwrite what is already written.

()  ( condition -- )  Put other commands in the () block; it will be
executed only if the condition is zero, and skipped if nonzero. Conditional
blocks of the same kind cannot be nested.

[]  ( condition -- )  Put other commands in the [] block; it will be
executed only if the condition is nonzero, and skipped if zero. Conditional
blocks of the same kind cannot be nested.


=== Name output format ===

The name output format has each record on a line by itself, and each
record will be like:   |xxxx @yyyy

xxxx is four lowercase hex digits being the address of that label.

yyyy is the name of that label.

