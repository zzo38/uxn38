
=== Command-line switches ===

-D
  Use double buffering for the display.

-F
  Start in full screen mode.

-N
  Tells the window manager to omit the frame.

-Q
  Disable the mouse initially (it can still be enabled at run time).

-T year.month.day.hours.minutes.seconds.wday.yday.yday.isdst
  Use a fixed value for the date/time, by numbers with dots in between. In
  this case, it will read the same values from the date/time device each
  time it is read. If you put less numbers than expected, then zero will
  be used for the remaining values; however, some programs will use these
  values to seed a random number generator and will not work correctly if
  they are zero.

-Y
  Enable file system access including writing.

-Z
  Use UTC instead of local time. (Has no effect in combination with -T.)

-d
  Enable some debugging features. (Some will work even without this.)

-h #
  Set default screen height.

-i
  Hide the system mouse cursor. (The Uxn program might still draw its own
  mouse cursor, which most do.)

-n
  Disable GUI. This switch is required in order to read stdin; without it,
  stdin cannot be read (although command-line arguments still work).

-p #
  Select the palette. Valid palette numbers are 0 to 7, where 7 is the
  default setting and means that the running Uxn program can set colours.

-q
  Disable standard I/O.

-t #
  Set the frame rate, in milliseconds per frame.

-w #
  Set default screen width.

-x
  Enable extension device (only built-in extensions).

-y
  Enable read-only file system access.

-z #
  Set zoom level.


=== Function keys ===

F1
  Advance one frame, even if paused.

F3
  Toggle the mouse mode. When the mouse mode is disabled, the mouse device
  does not work; the mouse vector is not called and the mouse coordinates
  and button state is not updated.

F4
  Change which graphics layers are displayed. Either both layers, or only
  foreground or only background.

F5
  Redraw screen. If the right shift key is also pushed, then also sends
  some debug output to stderr.

F6 / F7
  Palette selection.

F9
  Restart.

F10
  Quit.

PAUSE
  Pause/unpause VM.

Some programs use shortcut keys with control and letters. This does not
work in this program; therefore, END is an alias for the joypad A button
(the left control key also corresponds to the joypad A button, but if used
together with letter keys, will enter control characters instead).


=== Extension device ===

Device fifteen is the extension device, which is defined as:
  f0 = vector *
  f1
  f2 = conventional memory transfer base *
  f3
  f4 = expanded memory transfer base *
  f5
  f6 = transfer length *
  f7
  f8 = transfer operation
  f9 = device version
  fa = device seven UUID address *
  fb
  fc = device thirteen UUID address *
  fd
  fe = device fourteen UUID address *
  ff

The transfer operation is used for copying data to/from expanded memory.
Use the bits as following:

* bit0 = Set to transfer conventional to expanded memory, or clear to
transfer expanded to conventional memory.

* bit1 = Selects which page of expanded memory to use.

Other bits are reserved and must be clear.

If the program file is too big to fit into conventional memory, then as
much as will fit of the rest will be loaded into expanded memory.

Writing to the UUID address ports will read sixteen bytes at that address
and then will set the device version field to the version number, which
can be zero if it is not implemented, an odd number for an unstable
implementation, or an even number for a stable implementation. (The memory
that it points to can be reused afterward with no problem.)

The vector is called after passing command-line arguments, but before any
other events occur.

(Note: Using this feature will make the program not portable to other
implementations, and should be avoided if possible. However, it is
available if its functions (e.g. expanded memory) are needed in your
program for any reason. Most programs probably will not need expanded
memory; some might be able to optionally use it.)


=== Extension loading ===

(This section describes a feature which is not implemented yet. Some
details might be changed before being implemented.)

Some extensions may be implemented internally if that is necessary, but it
is expected that most extensions might be external, so that it is possible
to avoid putting too many things into the emulator.

In the specified directory, are files named by the UUID (in lowercase
hexadecimal with hyphens) followed by ".so". This must export a function
named "uxn_extension_main", which is called the first time the extension
is loaded by the device UUID address fields being filled in by the Uxn
program. This function should return a pointer to the UxnExtension
structure for this extension, or null if it is somehow not valid. The
first argument is a pointer to the (binary) UUID, which can be used in
case the same file implements multiple extensions.

